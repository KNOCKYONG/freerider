# 📊 Flutter 앱 품질 관리 가이드

## 🎯 품질 목표 (Quality Objectives)

### 핵심 지표
| 지표 | 목표값 | 임계값 | 측정 방법 |
|------|--------|--------|-----------|
| 코드 커버리지 | ≥ 85% | < 70% | `flutter test --coverage` |
| 기술 부채 | < 5일 | > 10일 | SonarQube |
| 크래시율 | < 0.1% | > 1% | Firebase Crashlytics |
| 앱 시작 시간 | < 2초 | > 4초 | Performance Monitoring |
| 프레임율 | 60 fps | < 30 fps | Flutter DevTools |
| 메모리 사용량 | < 150MB | > 300MB | Memory Profiler |
| 번들 크기 (APK) | < 30MB | > 50MB | Build Analysis |
| 번들 크기 (iOS) | < 40MB | > 60MB | Build Analysis |

## 🔍 코드 품질 검사 (Code Quality Checks)

### 1. 정적 분석 (Static Analysis)

```yaml
# analysis_options.yaml
analyzer:
  strong-mode:
    implicit-casts: false
    implicit-dynamic: false
  errors:
    missing_required_param: error
    missing_return: error
    todo: warning
    deprecated_member_use_from_same_package: ignore
  exclude:
    - "**/*.g.dart"
    - "**/*.freezed.dart"
    - "test/**"

linter:
  rules:
    # Error Rules
    - always_use_package_imports
    - avoid_dynamic_calls
    - avoid_empty_else
    - avoid_print
    - avoid_relative_lib_imports
    - avoid_returning_null_for_future
    - avoid_slow_async_io
    - avoid_type_to_string
    - avoid_types_as_parameter_names
    - avoid_web_libraries_in_flutter
    - cancel_subscriptions
    - close_sinks
    - comment_references
    - control_flow_in_finally
    - empty_statements
    - hash_and_equals
    - invariant_booleans
    - iterable_contains_unrelated_type
    - list_remove_unrelated_type
    - literal_only_boolean_expressions
    - no_adjacent_strings_in_list
    - no_duplicate_case_values
    - no_logic_in_create_state
    - prefer_void_to_null
    - test_types_in_equals
    - throw_in_finally
    - unnecessary_statements
    - unrelated_type_equality_checks
    - unsafe_html
    - use_build_context_synchronously
    - use_key_in_widget_constructors
    - valid_regexps
    
    # Style Rules
    - always_declare_return_types
    - always_put_control_body_on_new_line
    - always_put_required_named_parameters_first
    - always_require_non_null_named_parameters
    - annotate_overrides
    - avoid_annotating_with_dynamic
    - avoid_bool_literals_in_conditional_expressions
    - avoid_catches_without_on_clauses
    - avoid_catching_errors
    - avoid_classes_with_only_static_members
    - avoid_double_and_int_checks
    - avoid_equals_and_hash_code_on_mutable_classes
    - avoid_escaping_inner_quotes
    - avoid_field_initializers_in_const_classes
    - avoid_function_literals_in_foreach_calls
    - avoid_implementing_value_types
    - avoid_init_to_null
    - avoid_js_rounded_ints
    - avoid_null_checks_in_equality_operators
    - avoid_positional_boolean_parameters
    - avoid_private_typedef_functions
    - avoid_redundant_argument_values
    - avoid_renaming_method_parameters
    - avoid_return_types_on_setters
    - avoid_returning_null
    - avoid_returning_null_for_void
    - avoid_returning_this
    - avoid_setters_without_getters
    - avoid_shadowing_type_parameters
    - avoid_single_cascade_in_expression_statements
    - avoid_types_on_closure_parameters
    - avoid_unnecessary_containers
    - avoid_unused_constructor_parameters
    - avoid_void_async
    - await_only_futures
    - camel_case_extensions
    - camel_case_types
    - cascade_invocations
    - constant_identifier_names
    - curly_braces_in_flow_control_structures
    - deprecated_consistency
    - directives_ordering
    - do_not_use_environment
    - empty_catches
    - empty_constructor_bodies
    - exhaustive_cases
    - file_names
    - flutter_style_todos
    - implementation_imports
    - join_return_with_assignment
    - leading_newlines_in_multiline_strings
    - library_names
    - library_prefixes
    - library_private_types_in_public_api
    - lines_longer_than_80_chars
    - missing_whitespace_between_adjacent_strings
    - no_default_cases
    - no_leading_underscores_for_library_prefixes
    - no_leading_underscores_for_local_identifiers
    - no_runtimeType_toString
    - non_constant_identifier_names
    - noop_primitive_operations
    - null_check_on_nullable_type_parameter
    - null_closures
    - omit_local_variable_types
    - one_member_abstracts
    - only_throw_errors
    - overridden_fields
    - package_api_docs
    - package_names
    - package_prefixed_library_names
    - parameter_assignments
    - prefer_adjacent_string_concatenation
    - prefer_asserts_in_initializer_lists
    - prefer_asserts_with_message
    - prefer_collection_literals
    - prefer_conditional_assignment
    - prefer_const_constructors
    - prefer_const_constructors_in_immutables
    - prefer_const_declarations
    - prefer_const_literals_to_create_immutables
    - prefer_constructors_over_static_methods
    - prefer_contains
    - prefer_double_quotes
    - prefer_equal_for_default_values
    - prefer_expression_function_bodies
    - prefer_final_fields
    - prefer_final_in_for_each
    - prefer_final_locals
    - prefer_for_elements_to_map_fromIterable
    - prefer_foreach
    - prefer_function_declarations_over_variables
    - prefer_generic_function_type_aliases
    - prefer_if_elements_to_conditional_expressions
    - prefer_if_null_operators
    - prefer_initializing_formals
    - prefer_inlined_adds
    - prefer_int_literals
    - prefer_interpolation_to_compose_strings
    - prefer_is_empty
    - prefer_is_not_empty
    - prefer_is_not_operator
    - prefer_iterable_whereType
    - prefer_mixin
    - prefer_null_aware_method_calls
    - prefer_null_aware_operators
    - prefer_relative_imports
    - prefer_single_quotes
    - prefer_spread_collections
    - prefer_typing_uninitialized_variables
    - provide_deprecation_message
    - public_member_api_docs
    - recursive_getters
    - require_trailing_commas
    - sized_box_for_whitespace
    - sized_box_shrink_expand
    - slash_for_doc_comments
    - sort_child_properties_last
    - sort_constructors_first
    - sort_pub_dependencies
    - sort_unnamed_constructors_first
    - tighten_type_of_initializing_formals
    - type_annotate_public_apis
    - type_init_formals
    - unawaited_futures
    - unnecessary_await_in_return
    - unnecessary_brace_in_string_interps
    - unnecessary_const
    - unnecessary_constructor_name
    - unnecessary_getters_setters
    - unnecessary_lambdas
    - unnecessary_late
    - unnecessary_new
    - unnecessary_null_aware_assignments
    - unnecessary_null_checks
    - unnecessary_null_in_if_null_operators
    - unnecessary_nullable_for_final_variable_declarations
    - unnecessary_overrides
    - unnecessary_parenthesis
    - unnecessary_raw_strings
    - unnecessary_string_escapes
    - unnecessary_string_interpolations
    - unnecessary_this
    - unnecessary_to_list_in_spreads
    - unrelated_type_equality_checks
    - use_colored_box
    - use_decorated_box
    - use_enums
    - use_full_hex_values_for_flutter_colors
    - use_function_type_syntax_for_parameters
    - use_if_null_to_convert_nulls_to_bools
    - use_is_even_rather_than_modulo
    - use_late_for_private_fields_and_variables
    - use_named_constants
    - use_raw_strings
    - use_rethrow_when_possible
    - use_setters_to_change_properties
    - use_string_buffers
    - use_super_parameters
    - use_test_throws_matchers
    - use_to_and_as_if_applicable
    - void_checks
2. 실행 명령어
bash# 정적 분석 실행
flutter analyze

# 코드 포맷팅 검사
dart format --set-exit-if-changed .

# 코드 포맷팅 적용
dart format .

# 의존성 검사
flutter pub deps --no-dev --executables

# 오래된 패키지 확인
flutter pub outdated

# 보안 취약점 검사
flutter pub audit
🧪 테스트 품질 (Test Quality)
테스트 레벨별 요구사항
markdown### 1. 단위 테스트 (Unit Tests)
- **커버리지**: ≥ 85%
- **실행 시간**: < 5초
- **테스트 케이스**: 모든 public 메서드
- **모킹**: Mockito 사용

### 2. 위젯 테스트 (Widget Tests)
- **커버리지**: ≥ 75%
- **실행 시간**: < 30초
- **테스트 케이스**: 모든 커스텀 위젯
- **골든 테스트**: 주요 화면 포함

### 3. 통합 테스트 (Integration Tests)
- **커버리지**: 핵심 사용자 플로우 100%
- **실행 시간**: < 5분
- **테스트 환경**: 실제 디바이스/에뮬레이터
- **자동화**: CI/CD 파이프라인 통합
테스트 품질 측정
bash#!/bin/bash
# test_quality.sh

echo "🧪 테스트 품질 검사 시작..."

# 1. 테스트 실행 및 커버리지 생성
flutter test --coverage --test-randomize-ordering-seed random

# 2. 커버리지 HTML 리포트 생성
genhtml coverage/lcov.info -o coverage/html --show-details

# 3. 커버리지 임계값 확인
coverage_percentage=$(lcov --summary coverage/lcov.info 2>&1 | grep "lines" | sed 's/.*: \([0-9.]*\)%.*/\1/')
echo "현재 커버리지: $coverage_percentage%"

if (( $(echo "$coverage_percentage < 85" | bc -l) )); then
    echo "❌ 커버리지가 목표치(85%)에 미달합니다."
    exit 1
fi

# 4. 테스트 실행 시간 확인
test_duration=$(flutter test --machine | jq -r '.time')
echo "테스트 실행 시간: ${test_duration}ms"

echo "✅ 테스트 품질 검사 완료!"
🎨 UI/UX 품질 (UI/UX Quality)
1. 디자인 일관성 체크리스트
markdown- [ ] **컬러 시스템**
  - [ ] 라이트/다크 테마 지원
  - [ ] WCAG 2.1 AA 대비율 준수
  - [ ] 일관된 컬러 팔레트 사용

- [ ] **타이포그래피**
  - [ ] 폰트 계층 구조 (최대 3단계)
  - [ ] 최소 가독 크기 (12sp 이상)
  - [ ] 일관된 행간 및 자간

- [ ] **스페이싱**
  - [ ] 8dp 그리드 시스템
  - [ ] 일관된 패딩/마진
  - [ ] 터치 타겟 최소 48x48dp

- [ ] **애니메이션**
  - [ ] 60fps 유지
  - [ ] 자연스러운 이징 곡선
  - [ ] 의미 있는 트랜지션
2. 접근성 검사
dart// accessibility_test.dart
import 'package:flutter_test/flutter_test.dart';
import 'package:flutter/material.dart';

void checkAccessibility(Widget widget) {
  testWidgets('접근성 검사', (WidgetTester tester) async {
    await tester.pumpWidget(MaterialApp(home: widget));
    
    // Semantics 검사
    final SemanticsHandle handle = tester.ensureSemantics();
    
    // 모든 인터랙티브 요소에 라벨 확인
    expect(
      tester.getSemantics(find.byType(ElevatedButton)),
      matchesSemantics(label: isNotEmpty),
    );
    
    // 이미지에 대체 텍스트 확인
    expect(
      tester.getSemantics(find.byType(Image)),
      matchesSemantics(label: isNotEmpty),
    );
    
    handle.dispose();
  });
}
📈 성능 품질 (Performance Quality)
1. 성능 프로파일링
dart// performance_monitor.dart
class PerformanceMonitor {
  static void measureWidgetBuildTime(String widgetName) {
    final stopwatch = Stopwatch()..start();
    
    WidgetsBinding.instance.addPostFrameCallback((_) {
      stopwatch.stop();
      final buildTime = stopwatch.elapsedMilliseconds;
      
      if (buildTime > 16) {  // 60fps = 16ms per frame
        print('⚠️ $widgetName 빌드 시간: ${buildTime}ms');
      }
    });
  }
  
  static void measureMemoryUsage() {
    final info = ProcessInfo.currentRss;
    final memoryMB = info / 1024 / 1024;
    
    if (memoryMB > 150) {
      print('⚠️ 메모리 사용량 초과: ${memoryMB.toStringAsFixed(2)}MB');
    }
  }
}
2. 성능 최적화 체크리스트
markdown- [ ] **이미지 최적화**
  - [ ] WebP 포맷 사용
  - [ ] 적절한 해상도 (1x, 2x, 3x)
  - [ ] 지연 로딩 구현

- [ ] **리스트 최적화**
  - [ ] ListView.builder 사용
  - [ ] 아이템 재활용
  - [ ] 이미지 캐싱

- [ ] **상태 관리 최적화**
  - [ ] 불필요한 rebuild 방지
  - [ ] const 위젯 활용
  - [ ] 선택적 rebuild (Selector, Consumer)

- [ ] **네트워크 최적화**
  - [ ] API 응답 캐싱
  - [ ] 페이지네이션
  - [ ] 압축 사용 (gzip)
🔒 보안 품질 (Security Quality)
1. 보안 체크리스트
markdown### 데이터 보호
- [ ] 민감 데이터 암호화 (AES-256)
- [ ] 안전한 저장소 사용 (flutter_secure_storage)
- [ ] 메모리에서 민감 데이터 제거
- [ ] 스크린샷 방지 (민감 화면)

### 네트워크 보안
- [ ] HTTPS 강제 사용
- [ ] 인증서 피닝
- [ ] API 키 난독화
- [ ] 요청 서명/검증

### 인증/인가
- [ ] 생체 인증 구현
- [ ] 토큰 만료 처리
- [ ] 세션 타임아웃
- [ ] 다중 인증 (MFA) 지원

### 코드 보안
- [ ] ProGuard/R8 적용 (Android)
- [ ] 코드 난독화
- [ ] 디버그 정보 제거
- [ ] 루팅/탈옥 감지
2. 보안 테스트
dart// security_test.dart
import 'package:flutter_test/flutter_test.dart';

void securityTests() {
  group('보안 테스트', () {
    test('API 키가 하드코딩되지 않았는지 확인', () {
      final sourceCode = File('lib/').readAsStringSync();
      expect(sourceCode.contains('api_key'), isFalse);
      expect(sourceCode.contains('secret'), isFalse);
    });
    
    test('HTTPS 통신 확인', () {
      final apiUrl = ApiConfig.baseUrl;
      expect(apiUrl.startsWith('https://'), isTrue);
    });
    
    test('민감 데이터 암호화 확인', () async {
      final storage = SecureStorage();
      await storage.write('test_key', 'sensitive_data');
      
      // 실제 저장된 값이 암호화되었는지 확인
      final encrypted = await storage.readRaw('test_key');
      expect(encrypted, isNot(equals('sensitive_data')));
    });
  });
}
📋 릴리즈 품질 체크리스트
1. 빌드 전 검사
bash#!/bin/bash
# pre_release_check.sh

echo "📋 릴리즈 품질 검사 시작..."

# 1. 코드 분석
echo "1️⃣ 코드 분석..."
flutter analyze
if [ $? -ne 0 ]; then
    echo "❌ 코드 분석 실패"
    exit 1
fi

# 2. 테스트 실행
echo "2️⃣ 테스트 실행..."
flutter test
if [ $? -ne 0 ]; then
    echo "❌ 테스트 실패"
    exit 1
fi

# 3. 포맷팅 확인
echo "3️⃣ 코드 포맷팅 확인..."
dart format --set-exit-if-changed .
if [ $? -ne 0 ]; then
    echo "❌ 포맷팅 필요"
    exit 1
fi

# 4. 의존성 확인
echo "4️⃣ 의존성 확인..."
flutter pub outdated
flutter pub audit

# 5. 번들 크기 확인
echo "5️⃣ 번들 크기 확인..."
flutter build apk --analyze-size
flutter build ios --analyze-size

echo "✅ 릴리즈 품질 검사 완료!"
2. 릴리즈 체크리스트
markdown## 🚀 릴리즈 체크리스트 v[X.X.X]

### 코드 품질
- [ ] 모든 테스트 통과
- [ ] 코드 커버리지 85% 이상
- [ ] 정적 분석 오류 0개
- [ ] 코드 리뷰 완료

### 성능
- [ ] 앱 시작 시간 < 2초
- [ ] 60fps 유지
- [ ] 메모리 누수 없음
- [ ] 배터리 최적화 완료

### 보안
- [ ] 보안 스캔 통과
- [ ] 민감 데이터 암호화
- [ ] ProGuard 규칙 적용
- [ ] API 키 보호

### 호환성
- [ ] iOS 12+ 테스트
- [ ] Android 6.0+ 테스트
- [ ] 태블릿 레이아웃 확인
- [ ] 다크모드 테스트

### 문서화
- [ ] 릴리즈 노트 작성
- [ ] API 문서 업데이트
- [ ] 사용자 가이드 업데이트
- [ ] 변경 로그 작성

### 배포
- [ ] 버전 번호 업데이트
- [ ] 스토어 스크린샷 업데이트
- [ ] 스토어 설명 업데이트
- [ ] 베타 테스트 완료
📊 품질 대시보드
markdown## 품질 메트릭 대시보드

### 현재 상태 (날짜: YYYY-MM-DD)

| 카테고리 | 지표 | 현재값 | 목표 | 상태 |
|---------|------|--------|------|------|
| **코드** | 커버리지 | 87% | ≥85% | 🟢 |
| | 기술 부채 | 3일 | <5일 | 🟢 |
| | 중복 코드 | 2.1% | <3% | 🟢 |
| **성능** | 시작 시간 | 1.8초 | <2초 | 🟢 |
| | FPS | 59 | 60 | 🟡 |
| | 메모리 | 145MB | <150MB | 🟢 |
| **안정성** | 크래시율 | 0.08% | <0.1% | 🟢 |
| | ANR율 | 0.02% | <0.05% | 🟢 |
| | 에러율 | 0.5% | <1% | 🟢 |
| **사용성** | 앱 평점 | 4.6 | ≥4.5 | 🟢 |
| | 리텐션 | 68% | ≥60% | 🟢 |
| | 일일 활성 | 45% | ≥40% | 🟢 |

### 트렌드 분석
📈 개선 중: 코드 커버리지 (+5%), 앱 시작 시간 (-0.3초)
📉 주의 필요: FPS (-1), 메모리 사용량 (+10MB)
🔄 지속적 품질 개선
주간 품질 리뷰
markdown## 주간 품질 리뷰 템플릿

### 📅 기간: YYYY-MM-DD ~ YYYY-MM-DD

### 🎯 품질 목표 달성도
- [ ] 코드 커버리지 85% 이상 유지
- [ ] 크래시 없는 릴리즈
- [ ] 성능 지표 개선

### 📊 주요 지표
| 지표 | 지난주 | 이번주 | 변화 |
|------|--------|--------|------|
| 커버리지 | % | % | ↑/↓ |
| 크래시율 | % | % | ↑/↓ |
| 평균 평점 | ⭐ | ⭐ | ↑/↓ |

### 🐛 주요 이슈
1. [이슈 #1]: 설명 및 해결 방안
2. [이슈 #2]: 설명 및 해결 방안

### ✨ 개선 사항
1. [개선 #1]: 구현 내용 및 효과
2. [개선 #2]: 구현 내용 및 효과

### 📝 다음 주 계획
- [ ] [작업 1]
- [ ] [작업 2]
- [ ] [작업 3]
🛠 품질 도구 설정
1. CI/CD 품질 게이트
yaml# .github/workflows/quality_gate.yml
name: Quality Gate

on:
  pull_request:
    branches: [ main, develop ]

jobs:
  quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.x'
    
    - name: Install dependencies
      run: flutter pub get
    
    - name: Analyze code
      run: flutter analyze
    
    - name: Run tests
      run: flutter test --coverage
    
    - name: Check coverage
      run: |
        coverage=$(lcov --summary coverage/lcov.info | grep "lines" | sed 's/.*: \([0-9.]*\)%.*/\1/')
        if (( $(echo "$coverage < 85" | bc -l) )); then
          echo "Coverage is below 85%"
          exit 1
        fi
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: coverage/lcov.info
2. 품질 모니터링 통합
dart// lib/core/quality/quality_monitor.dart
class QualityMonitor {
  static final _crashlytics = FirebaseCrashlytics.instance;
  static final _analytics = FirebaseAnalytics.instance;
  static final _performance = FirebasePerformance.instance;
  
  static void initialize() {
    // 크래시 리포팅
    FlutterError.onError = _crashlytics.recordFlutterFatalError;
    
    // 성능 모니터링
    _performance.setPerformanceCollectionEnabled(true);
    
    // 사용자 행동 분석
    _analytics.setAnalyticsCollectionEnabled(true);
  }
  
  static void trackQualityMetric(String name, double value) {
    _analytics.logEvent(
      name: 'quality_metric',
      parameters: {
        'metric_name': name,
        'value': value,
        'timestamp': DateTime.now().toIso8601String(),
      },
    );
  }
  
  static Future<void> reportQualityIssue(String issue) async {
    await _crashlytics.log('Quality Issue: $issue');
    await _crashlytics.recordError(
      Exception('Quality Issue'),
      null,
      reason: issue,
      fatal: false,
    );
  }
}